(function() {
  'use strict';

  // *
  // Constants
  // *
  var assetBaseUrl = '//saambaa.com/widget/gpt/970x250', ////pweb01.saambaa.com/widget/gpt/970x250/_stage2
    gaPropertyId = 'UA-55160257-3',
    apiBaseUrl = '//api.saambaa.com',
    siteBaseUrl = '//saambaa.com/site/full/#/',
    widgetStyle = '970x250',
    blankImageUrl = '//saambaa.com/assets/image/blank.png',
    widgetClass = 'smb-dispad',
    widgetHeaderContClass = 'smb-dispad-header-cont',
    widgetHeaderClass = 'smb-dispad-header',
    widgetHeaderId = 'smb-dispad-header-text',
    widgetHeaderSuggestClass = 'smb-dispad-header-suggest',
    widgetContBackdrop = 'smb-dispad-adcont-backdrop',
    WidgetContBackdropLogo = 'smb-dispad-adcont-backdrop-logo',
    WidgetContBackdropText = 'smb-dispad-adcont-backdrop-text',
    widgetAdContClass = 'smb-dispad-adcont',
    widgetAdUnitContClass = 'smb-dispad-adunit-cont',
    widgetDisplayAdContId = 'smb-vidad-displayad-contid',
    widgetDisplayAdContClass = 'smb-dispad-displayad-cont',
    widgetDisplayAdUnitContClass = 'smb-dispad-displayadunit-cont',
    widgetMainCont = 'smb-dispad-main-cont',
    widgetSlideContClass = 'smb-dispad-slideshow-cont',
    widgetLoaderClass = 'smb-dispad-loader',
    widgetItemContId = 'smb-dispad-item-contid',
    widgetItemContClass = 'smb-dispad-item-cont',
    widgetFooterContClass = 'smb-dispad-footer-cont',
    widgetFooterTextId = 'smb-vidad-footer-text',
    widgetItemClass = 'smb-dispad-item',
    widgetItemCaptionContClass = 'smb-dispad-img-caption-cont',
    widgetItemCaptionClass = 'smb-dispad-img-caption',
    widgetItemTitleClass = 'smb-dispad-img-caption-title',
    widgetItemDetailClass = 'smb-dispad-img-caption-detail',
    widgetMarketClass = 'smb-dispad-markets',
    widgetMarketSelectContClass = 'custom-select',
    widgetMarketSelectClass = 'smb-dispad-markets-select',
    widgetItemClickMoreClass = 'smb-dispad-img-caption-clickmore',
    slideInUpClass = 'slideInUp',
    slideInLeftClass = 'slideInLeft',
    fadeInClass = 'fadeIn',
    staticCaptionClass = 'staticCaption',
    fontStyleId = 'smb-fonts',
    widgetStyleId = 'smb-dispad-style',
    widgetSelecStyleId = 'smb-dispad-select-style',
    widgetAniStyleId = 'smb-dispad-animation-style',
    jsonLibId = 'smb-json',
    dateLibId = 'smb-date',
    jwLibId = 'smb-jw',
    cfgLibId = 'smb-cfg',
    eqcssLibId = 'smb-eq',
    googTagLibId = 'smb-googtag',
    smbPrebid = 'smb-prebid',
    videoCallback = '__smbOnAdUnitDone',
    // display ad id
    displayAdLeft = 'smb-dispad-left',
    displayAdRight = 'smb-dispad-right',
    lkqdVPAID,
    vpaidFrame;

  var _smbDisplayAdHeight = 250,
    _smbDisplayAdWidth = 300;

  var cLog = function(msg) {
    if (widgetConfig.traceLevel > 4) {
      console.log(msg);
    }
  };
  // Browser check
  var _isMobileDevice = function() {
    var check = false;
    (function(a) {
      if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
        check = true
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
  };

  var _isAdexBlocked = function() {
    return (document.head.innerHTML.toString().indexOf("blockadex', 'TRUE'") > -1)
  }

  var clearTimer = function(_timer) {
    if (_timer)
      clearTimeout(_timer);
    _timer = null;
  };

  // $
  // DOM builder
  // $
  var el = {
    getById: function(id) {
      return document.getElementById(id);
    },

    getByTag: function(tag) {
      return document.getElementsByTagName(tag);
    },

    getByClassName: function(elm, cls) {
      return elm.getElementsByClassName(cls);
    },

    create: function(tag, props) {
      var elm = document.createElement(tag);

      for (var prop in props) {
        elm[prop] = props[prop];
      }

      return elm;
    },

    addEvent: function(elm, e, handler) {
      elm.addEventListener(e, handler, false);
    }
  };

  //$ Dynamically add stylesheets to page
  var stylesLoader = function(styles) {

    for (var i = 0; i < styles.length; i++) {
      var style = styles[i],
        styleTag = el.getById(style.id);

      if (styleTag)
        continue;

      // set additional properties
      style.type = 'text/css';
      style.rel = 'stylesheet';
      styleTag = el.create('link', style);
      (document.head || el.getByTag('head')[0]).appendChild(styleTag);
    }
  };

  //$ Dynamically adds script to page
  var scriptsLoader = function(scripts, cb) {
    var scriptsLoaded = 0;

    var onLoadedScripts = function() {
      scriptsLoaded++;

      if (scriptsLoaded !== scripts.length)
        return;

      if (cb)
        cb();
    };

    for (var i = 0; i < scripts.length; i++) {
      var script = scripts[i],
        scriptTag = el.getById(script.id);

      if (scriptTag)
        continue;

      // add additional properties
      script.type = 'text/javascript';
      script.async = true;

      scriptTag = el.create('script', script);
      scriptTag.onreadystatechange = scriptTag.onload = function() {
        var state = scriptTag.readyState;

        if (!state || /loaded|complete/.test(state))
          onLoadedScripts();
      };

      (document.head || el.getByTag('head')[0]).appendChild(scriptTag);
    }

  };

  // *
  // VIDEO WIDGET
  // *
  var VidWidget = (function() {

    // Animation check
    var _getAnimationEvent = function() {
      var elm = el.create('fakeelement'),
        animations = {
          'animation': 'animationend',
          'OAnimation': 'oAnimationEnd',
          'MozAnimation': 'transitionend',
          'WebkitAnimation': 'webkitAnimationEnd'
        };

      for (var an in animations) {
        if (elm.style[an] !== undefined) {
          return animations[an];
        }
      }
    };

    // AJAX JSON Request
    var _execJsonReq = function(action, uri, cb) {
      var xhr = new XMLHttpRequest();
      xhr.open(action, uri);
      xhr.onload = function() {
        var response = JSON.parse(xhr.responseText);
        if (cb)
          cb(response.Data);
      };

      xhr.send();
    };

    var _config = {
        version: '0.1.0'
      },
      _currentMarketId = 0,
      _itemCount = 0,
      _slideIndex = 0,
      _slideMaxCount = 5,
      _slideTimeout = null,
      _displayAdTimeout = null,
      _idleStateTimeout = null,
      _slideRegEx = new RegExp(slideInUpClass + '|' + slideInLeftClass, 'g'),
      _isMobile = _isMobileDevice(),
      _firstLoad = true,
      _prebidInitialized = false,
      _widgetLoaded = false,
      _displayAdRefreshInterval = 5 * 1000,
      _displayAdMode = false,
      _tagInfo = null,
      _initMoatOnAdTime = false,
      _adIsLoaded = false,
      _adSlotsCleared = false,
      _requestAdTimer = null,
      _requestVideoTimeoutTimer = null,
      _requestDisplayAdTimeoutTimer = null,
      _videoAdTimeSessionKey = '__smbVidST',
      _displayAdTimeSessionKey = '__smbDtST',
      _videoAdRequestCountSessionKey = '_smbVideoAdRequestCount',
      _displayAdRequestCountSessionKey = '_smbDisplayAdRequestCount',
      _displayAdRequestCount = 0,
      _videoAdRequestCount = 0,
      _displayAdHasRendered = null,
      _currentFocus = null,
      _videoState = '',
      _isVideoContainerViewable = false,
      _moatApi = null,
      _moatIds,
      // elements
      _marketSelect = null,
      _widgetContainer = null,
      _widget = null,
      _mainCont = null,
      _slideShowCont = null,
      _itemCont = null,
      _videoCont = null,
      _displayAdLeftCont = null,
      _displayAdRightCont = null,
      _showZindex = 1,
      _hideZindex = 0;

    var trace = function(msg, severity) {
      if (widgetConfig.traceLevel > 0) {
        switch (severity) {
          case 'price':
            console.log(msg);
            break;
        }
      }
      if (widgetConfig.traceLevel > 1) {
        switch (severity) {
          case 'error':
            console.error(msg);
            break;
          case 'warn':
            console.warn(msg);
            break;
          case 'info':
            console.info(msg);
        }
      }
    };

    const eventLog = function(msg, style) {
      if (widgetConfig.traceLevel > 3) {
        console.log(`%c ${msg}`, `${style}`);
      }
    }
    var _disableVideoRequests = function() {
      trace('disabling video requests', 'warn');
      widgetConfig.videoAdEnabled = false;
    }

    var _disableDisplayAdRequests = function() {
      trace('disabling displayAd requests', 'warn');
      widgetConfig.displayAdEnabled = false;
    }

    // *
    // Main widget bootstrap function
    // *
    var _createWidget = function() {

      if (_requestAdsAfterLoad()) {
        trace('Requesting ads after load', 'warn');
        window.addEventListener('load', function() {
          trace('Widget loaded', 'warn');
          _widgetLoaded = true;
          _requestAds();
        });
      } else {
        _widgetLoaded = true;
      }
      trace(`SWV ${widgetConfig.startWhenViewable}`, 'info');

      //$ create display ad container
      _displayAdLeftCont = el.create('div', {
        className: widgetDisplayAdContClass
      });
      const backdropLeft = el.create('div', {
        className: widgetContBackdrop
      });
      const backdropLogoLeft = el.create('div', {
        className: WidgetContBackdropLogo
      });
      const backdropTextLeft = el.create('div', {
        className: WidgetContBackdropText,
        innerHTML: "Find Your Fun"
      });
      _displayAdLeftCont.appendChild(backdropLeft);
      _displayAdLeftCont.appendChild(backdropLogoLeft);
      _displayAdLeftCont.appendChild(backdropTextLeft);
      _widget.appendChild(_displayAdLeftCont);
      // cLog(_displayAdLeftCont);

      var _widgetContainer = el.create('div', {
        className: 'smb-dispad-widget-cont'
      });
      _widget.appendChild(_widgetContainer);

      //$ create header
      var headerTemplate = '<div class="' + widgetHeaderClass + '"><div class="' + widgetMarketClass + '"><div class="' + widgetMarketSelectContClass + '"><select class="' + widgetMarketSelectClass + '"></select></div></div></div>';

      var headerCont = el.create('div', {
        className: widgetHeaderContClass,
        innerHTML: headerTemplate
      });

      // setup market
      _marketSelect = el.getByClassName(headerCont, widgetMarketSelectClass)[0];

      el.addEvent(_marketSelect, 'change', function(e) {
        var marketSelected = _getSelectedMarketInfo(e);

        //_onMarketChange(_getSelectedMarketInfo(e)); // ?? REMOVE
        _onMarketChange(marketSelected.marketId);

        ga('smbTracker.send', 'event', 'markets', 'Market Selected', marketSelected.marketId + " " + marketSelected.marketName);
      });

      _mainCont = el.create('div', {
        className: widgetMainCont
      });

      _widgetContainer.appendChild(_mainCont);

      if (widgetConfig.useSession) {
        _displayAdRequestCount = sessionStorage.getItem(_displayAdRequestCountSessionKey);
        _videoAdRequestCount = sessionStorage.getItem(_videoAdRequestCountSessionKey);
      }
      // Video container setup

      if (widgetConfig.videoAdEnabled) {
        //$ create video ad container
        _videoCont = el.create('div', {
          className: widgetAdContClass,
          id: 'smbPlayer'
        });
        _videoCont.style.position = 'relative';
        _videoCont.style.display = 'block';
        _mainCont.appendChild(_videoCont);
        _createVideoUnit();
        if (widgetConfig.maxVideoAdRequestTimeInSec !== 0) {
          _requestVideoTimeoutTimer = setTimeout(_videoAdRequestTimeout, getAdRequestDurationTime(widgetConfig.maxVideoAdRequestTimeInSec, _videoAdTimeSessionKey));
        }
        eventLog(`video enabled`, `color:green`)
        trace('video enabled', 'info')
      } else {
        _displayAdMode = true;
        eventLog(`video disabled`, `color:red`)
        trace('video disabled', 'info')
      }

      //$ Create Slideshow Container
      _slideShowCont = el.create('div', {
        className: widgetSlideContClass
      })

      //$ create item container
      _itemCont = el.create('div', {
        className: widgetItemContClass,
        id: widgetItemContId
      });
      _itemCont.style.display = "block";

      _mainCont.appendChild(_slideShowCont);
      _slideShowCont.appendChild(headerCont);
      _slideShowCont.appendChild(_itemCont);

      //$ create footer
      var footerTemplate = '<div class="smb-dispad-powered-by"><div id="' + widgetFooterTextId + '">powered by <a title="Powered by Saambaa" href="//go.saambaa.com" target="' +
        '_blank"><img id="smb-icon" src="//saambaa.com/assets/image/logo-saambaa.png" alt' +
        '="Powered by Saambaa" /></a></div></div>';

      var footerCont = el.create('div', {
        className: widgetFooterContClass,
        innerHTML: footerTemplate
      });

      _slideShowCont.appendChild(footerCont);

      //$ create display ad container
      _displayAdRightCont = el.create('div', {
        className: widgetDisplayAdContClass
      });
      const backdropRight = el.create('div', {
        className: widgetContBackdrop
      });
      const backdropLogoRight = el.create('div', {
        className: WidgetContBackdropLogo
      });
      const backdropTextRight = el.create('div', {
        className: WidgetContBackdropText,
        innerHTML: "Find Your Fun"
      });
      _displayAdRightCont.appendChild(backdropRight);
      _displayAdRightCont.appendChild(backdropLogoRight);
      _displayAdRightCont.appendChild(backdropTextRight);
      _widget.appendChild(_displayAdRightCont);

      if (widgetConfig.maxDisplayAdRequestTimeInSec !== 0) {
        _requestDisplayAdTimeoutTimer = setTimeout(_displayAdRequestTimeout, getAdRequestDurationTime(widgetConfig.maxDisplayAdRequestTimeInSec, _displayAdTimeSessionKey));
      }
      // Load markets and slides
      _getMarkets();
    };

    //$ Creat script element for Google Analytics
    var _createAnalytics = function() {

      (function(i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r;
        i[r] = i[r] || function() {
          (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date();
        a = s.createElement(o),
          m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m)
      })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
      let hostname = document.location.host;
      if (hostname.includes('google'))
        hostname = document.referrer.split('/')[2].toString();
      ga('create', gaPropertyId, 'auto', 'smbTracker');
      ga('smbTracker.set', {
        page: document.location.pathname,
        title: document.title,
      });
      ga('smbTracker.set','hostname', hostname);
      ga('smbTracker.send', 'pageview', `widget/gpt/970x250/${widgetConfig.partnerName}`);

      // Piwik Analytics
      window._paq = window._paq || [];
      /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
      window._paq.push(['setCustomDimension', 1, `widget/gpt/970x250/${widgetConfig.partnerName}`]);
      window._paq.push(['setCustomDimension', 2, hostname]);
      window._paq.push(['trackPageView']);
      window._paq.push(['enableLinkTracking']);
      (function() {
        var u = "//analytics.saambaa.com/";
        window._paq.push(['setTrackerUrl', u + 'piwik.php']);
        window._paq.push(['setSiteId', widgetConfig.analyticsSiteId || '1']);
        var d = document,
          g = d.createElement('script'),
          s = d.getElementsByTagName('script')[0];
        g.type = 'text/javascript';
        g.async = true;
        g.defer = true;
        g.src = '//saambaa-static.azureedge.net/piwik.js';
        s.parentNode.insertBefore(g, s);
      })();

      // Init with QuantCast
      _quantcastScript();
      _quantcastPixel();
    };
    //$ Create script element for QuantCast
    var _quantcastScript = function() {
      var url = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";
      // TODO: Change to run functions from within JS instead of create el // Locate
      // _qevents in window
      var tracker = el.create('script', {
        innerHTML: "var _qevents = _qevents || [];(function() { var elem = document.createElement('s" +
          "cript');elem.src = '" + url + "';elem.async = true;elem.type = 'text/javascript'; var scpt = document.getElemen" +
          "tsByTagName('script')[0];scpt.parentNode.insertBefore(elem, scpt);})(); _qevents" +
          ".push({qacct: 'p-TWKb6gH_3MnFX'});"
      })
      tracker.type = 'text/javascript';
      (document.body || el.getByTag('body')[0]).appendChild(tracker);
    };
    //$ Create tracking pixel element for QuantCast
    var _quantcastPixel = function() {
      // TODO: change from innerHTML to instead build of props
      var pixel = el.create('noscript', {
        innerHTML: "<div>style='display:none;'><img src='//pixel.quantserve.com/pixel/p-TWKb6gH_3MnF" +
          "X.gif' border='0' height='1' width='1' alt='Quantcast'/></div>"
      });
      (document.body || el.getByTag('body')[0]).appendChild(pixel)
    };

    /*Copyright (c) 2011-2016 Moat Inc. All Rights Reserved.*/
    function initMoatTracking(a, c, d, h, k) {
      var f = document.createElement("script"),
        b = [];
      c = {
        adData: {
          ids: c,
          duration: d,
          url: k
        },
        dispatchEvent: function(a) {
          this.sendEvent ? (b && (b.push(a), a = b, b = !1), this.sendEvent(a)) : b.push(a)
        }
      };
      d = "_moatApi" + Math.floor(1E8 * Math.random());
      var e, g;
      try {
        e = a.ownerDocument, g = e.defaultView || e.parentWindow
      } catch (l) {
        e = document, g = window
      }
      g[d] = c;
      f.type = "text/javascript";
      a && a.insertBefore(f, a.childNodes[0] || null);
      f.src = "https://z.moatads.com/" + h + "/moatvideo.js#" + d;
      return c
    };

    function raiseMoatEvent(moatType, volume) {
      if (_moatApi) {
        _moatApi.dispatchEvent({
          "type": moatType,
          "adVolume": volume
        });
        eventLog(` ' ${moatType}' Reached // Volume ${volume}`, `color:black; background: yellow;`);
      }
    };

    var _getLoader = function() {
      return el.getByClassName(_itemCont, widgetLoaderClass)[0];
    };

    var _showLoader = function(show) {
      var loader = _getLoader();

      if (show && !loader) {
        loader = el.create('img', {
          src: assetBaseUrl + '/assets/loader-dots.gif',
          className: widgetLoaderClass
        });
        _itemCont.appendChild(loader);
      } else if (loader)
        _itemCont.removeChild(loader);
    };

    // Gets markets
    var _getMarkets = function() {
      _showLoader(true);

      // set default current market id
      if (!_currentMarketId)
        _currentMarketId = _config.marketId;

      _execJsonReq('GET', apiBaseUrl + '/partners/' + _config.partnerId + '/markets', function(items) {
        if (!items.length)
          return;

        if (_marketSelect.options.length) {
          for (var i = 0; i < market.options.length; i++) {
            _marketSelect.remove(market.options[i]);
          }
        }

        // create opts for each item
        for (var i = 0; i < items.length; i++) {
          var item = items[i];

          var opt = el.create('option', {
            value: item.Id,
            innerHTML: item.Name
          });

          if (item.Id === _currentMarketId)
            opt.setAttribute('selected', 'selected');

          _marketSelect.appendChild(opt);
        }
        _setupDisplay(); // MOVE to create widget??

        // Show Video Ad Unit
        if (!_displayAdMode)
          _showSlideContainer();
        else
          _onMarketChange(_getSelectedMarketInfo());
      });
    };

    // *
    // Gets posts for the selected market
    // *
    var _getPosts = function() {
      //$ show loader
      var loader = _getLoader();

      if (!loader)
        _showLoader(true);

      _resetSlide();

      var marketId = _currentMarketId || _config.marketId;

      _execJsonReq('GET', apiBaseUrl + '/partners/' + _config.partnerId + '/markets/' + marketId + '/channels/' + _config.channelId + '/posts?filteredPostsRequest={"pageNumber":1,"pageSize":' + widgetConfig.maxPosts + ',mode:"sparse"}', function(data) {
        //$ get loader again
        loader = _getLoader();

        if (loader)
          _showLoader(false);

        _itemCount = data.Items.length;

        if (!_itemCount)
          return;

        //$ clear existing items
        _itemCont.innerHTML = '';

        for (var i = 0; i < data.Items.length; i++) {
          var post = data.Items[i];

          var item = el.create('div', {
            className: widgetItemClass
          });
          _itemCont.appendChild(item);
          // create link
          var link = el.create('a', {
            href: _getPostUrl(post)
          });
          link.setAttribute('onclick', `ga('smbTracker.send', 'event', 'Ad', 'Click', 'widget/gpt/970x250/${widgetConfig.partnerName}')`); // removed /${post.Title}
          link.setAttribute('target', '_blank');
          item.appendChild(link);

          // create img tag and append to link
          var imgTag = el.create('img', {
            src: blankImageUrl,
            dataSrc: post.ImageUri
          });
          link.appendChild(imgTag);

          // create click more
          var clickMoreCont = el.create('div', {
            className: widgetItemClickMoreClass
          });
          clickMoreCont.innerHTML = '<p>Click for more</p>';
          link.appendChild(clickMoreCont);

          // create caption container
          var capCont = el.create('div', {
            className: widgetItemCaptionContClass
          });
          link.appendChild(capCont);

          // create caption and append to link
          var cap = el.create('div', {
            className: widgetItemCaptionClass
          });
          capCont.appendChild(cap);

          // create caption title
          var capTitle = el.create('p', {
            className: widgetItemTitleClass,
            innerHTML: post.Title
          });

          cap.appendChild(capTitle);

          var capDetail = el.create('p', {
            className: widgetItemDetailClass,
            innerHTML: _getCaptionDetail(post)
          });

          cap.appendChild(capDetail);
        }

        _nextSlide();
      });
    };

    // *
    // Helper function to get correct url based on post type
    // *
    var _getPostUrl = function(post) {
      var clickurl = (post.ClickthruUrl) ? post.ClickthruUrl : post.ClickUrl;  // remove legacy support after full api update
      var params = [
        'pd00=' + _config.partnerId,
        'pd01=' + _currentMarketId,
        'pd02=970x250',
      ];

      return clickurl + '?' + params.join('&');
    };

    // Gets caption detail
    var _getCaptionDetail = function(post) {
      var capText = post.StartDateFormatted + ' &#x00040 ' + post.PlaceName;
      if (post.Source)
        capText += '<br> <span> ' + post.Source + '</span>';
      return capText;
    };
    // *
    // SLIDE FUNCTIONS
    // *
    var _nextSlide = function() {
      if (_adSlotsCleared)
        refreshBids();

      if (_slideTimeout)
        clearTimer(_slideTimeout);

      var itemConts = _hideSlideItems();

      _slideIndex++;

      if (_slideIndex > itemConts.length)
        _slideIndex = 1;

      // get current item
      var item = itemConts[_slideIndex - 1];
      item.style.display = 'block';

      // get caption container
      var capCont = el.getByClassName(item, widgetItemCaptionContClass)[0],
        capDetail = el.getByClassName(capCont, widgetItemCaptionClass)[0],
        clickMore = el.getByClassName(item, widgetItemClickMoreClass)[0],
        img = item.getElementsByTagName('img')[0];

      if (img.src.indexOf('blank.png') != -1) // used for lazy loading
        img.src = img.dataSrc;

      // wire up caption animation
      if (widgetConfig.optimizationLevel == 0) {
        var capTimeoutId = setTimeout(function() {
          clearTimer(capTimeoutId);
          capCont.className += ' ' + slideInUpClass;
        }, 300);

        // setup slide from left to right
        var aniEventType = _getAnimationEvent();

        var onCapContslideInUpDone = function() {
          capCont.removeEventListener(aniEventType, onCapContslideInUpDone);

          if (_isMobile)
            capDetail.className += ' ' + fadeInClass;
          else
            capDetail.className += ' ' + slideInLeftClass;
        };

        var onCapDetailDone = function() {
          capDetail.removeEventListener(aniEventType, onCapDetailDone);

          if (_isMobile)
            clickMore.className += ' ' + fadeInClass;
          else
            clickMore.className += ' ' + slideInLeftClass;
        };

        capCont.addEventListener(aniEventType, onCapContslideInUpDone);
        capDetail.addEventListener(aniEventType, onCapDetailDone);
      } else {
        capCont.className += ' ' + staticCaptionClass;
        capDetail.className += ' ' + staticCaptionClass;
        clickMore.className += ' ' + staticCaptionClass;
      }

      _slideTimeout = setTimeout(function() {
        _onSlideChange(itemConts.length);
      }, 1000 * widgetConfig.slideTimeInSec);
    };

    var _stopSlide = function() {
      if (_slideTimeout)
        clearTimer(_slideTimeout);

      _hideSlideItems();
    };

    var _removeAnimation = function(item) {
      var capCont = el.getByClassName(item, widgetItemCaptionContClass)[0],
        capDetail = el.getByClassName(capCont, widgetItemCaptionClass)[0],
        clickMore = el.getByClassName(item, widgetItemClickMoreClass)[0];

      if (widgetConfig.optimizationLevel == 0) {
        capDetail.className = capDetail.className.replace(_slideRegEx, '');
        capCont.className = capCont.className.replace(_slideRegEx, '');
        clickMore.className = clickMore.className.replace(_slideRegEx, '');
      } else {
        capDetail.className = capDetail.className.replace(staticCaptionClass, '');
        capCont.className = capCont.className.replace(staticCaptionClass, '');
        clickMore.className = clickMore.className.replace(staticCaptionClass, '');
      }
    };

    var _hideSlideItems = function() {
      var itemConts = el.getByClassName(_itemCont, widgetItemClass);

      for (var i = 0; i < itemConts.length; i++) {
        // remove animation
        var item = itemConts[i];
        item.style.display = 'none';
        _removeAnimation(item);
      }
      return itemConts;
    };

    var _resetSlide = function() {
      _slideIndex = 0;
      _stopSlide();
    };

    // cap/limit support
    var _isValidForDisplayAdRequest = function() {
      if (widgetConfig.displayAdEnabled) {
        if (widgetConfig.maxDisplayAdRequests != 0 && _displayAdRequestCount >= widgetConfig.maxDisplayAdRequests)
          _disableDisplayAdRequests();
      }
      return (widgetConfig.displayAdEnabled)
    };

    var _isValidForVideoAdRequest = function() {
      if (widgetConfig.videoAdEnabled) {
        if (widgetConfig.maxVideoAdRequests != 0) {
          widgetConfig.videoAdEnabled = _videoAdRequestCount < widgetConfig.maxVideoAdRequests;
          if (_videoAdRequestCount >= widgetConfig.maxVideoAdRequests)
            trace('video ad count exceeded', 'warn');
        }
      }
      return widgetConfig.videoAdEnabled;
    };

    var incrementDisplayAdRequestCount = function(increment) {
        if (increment == null)
          _displayAdRequestCount++;
        else
          _displayAdRequestCount = _displayAdRequestCount + increment;
        // Save # of refreshes data to sessionStorage
        if (widgetConfig.useSession)
          sessionStorage.setItem(_displayAdRequestCountSessionKey, _displayAdRequestCount);
        trace(`_displayAdRequestCount = ${_displayAdRequestCount}`, 'info');
      },
      resetDisplayAdRequestCount = function() {
        if (widgetConfig.useSession)
          sessionStorage.setItem(_displayAdRequestCountSessionKey, '0');
        _displayAdRequestCount = 0;
        trace(`Refresh reset displayAd count // ${_displayAdRequestCount}`, 'info')
      },
      isSessionExpired = function(sessionKey, maxTime) {
        var startTime = sessionStorage.getItem(sessionKey);
        if (startTime) {
          let timeNow = Date.now();
          if (timeNow - (startTime + maxTime) > 0)
            return (false);
        }
        return true;
      },
      getAdRequestDurationTime = function(requestDuration, sessionKey) {
        if (widgetConfig.useSession) {
          var startTime = sessionStorage.getItem(sessionKey);
          if (!startTime) {
            startTime = Date.now();
            sessionStorage.setItem(sessionKey, startTime);
            return requestDuration * 1000;
          } else {
            let timeNow = Date.now();
            if ((timeNow - startTime) > requestDuration) { // session exceeded so reset it
              sessionStorage.setItem(sessionKey, timeNow);
              return requestDuration * 1000;
            } else {
              var duration = (timeNow - startTime);
              return ((timeNow - startTime)); // already in milliseconds
            }
          }
        }
        return requestDuration * 1000;
      },
      resetVideoAdRequestCount = function() {
        if (widgetConfig.useSession)
          sessionStorage.setItem(_videoAdRequestCountSessionKey, '0');
        _videoAdRequestCount = 0;
        trace(`Refresh reset videoAd count // ${_videoAdRequestCount}`, 'info')
      },
      incrementVideoAdRequestCount = function() {
        _videoAdRequestCount++;
        if (widgetConfig.useSession)
          sessionStorage.setItem(_videoAdRequestCountSessionKey, _videoAdRequestCount); // Save # of refreshes data to sessionStorage
        trace(`_videAdRequestCount = ${_videoAdRequestCount}`, 'info');
      };

    // *
    // DISPLAY AD UNIT FUNCTIONS
    // *
    var _showDisplayAd = false,
      _smbGptLeftAdSlot,
      _smbGptRightAdSlot,
      _displayAdLeftTimeout,
      _displayAdRightTimeout,
      _displayAdIntervalLeft,
      _displayAdIntervalRight,
      PREBID_TIMEOUT = 700, //widgetConfig.prebidTimeout
      prebidAdUnits = null;

    var _createDisplayAdDivs = function() {

      // left ad unit
      var displayAdUnitLeft = el.create('div', {
        id: widgetConfig.displayAdIdLeft
      });
      displayAdUnitLeft.style.height = '250px';
      displayAdUnitLeft.style.width = '300px';
      displayAdUnitLeft.style.position = 'absolute';
      _displayAdLeftCont.appendChild(displayAdUnitLeft);

      // right ad unit
      var displayAdUnitRight = el.create('div', {
        id: widgetConfig.displayAdIdRight
      });
      displayAdUnitRight.style.height = '250px';
      displayAdUnitRight.style.width = '300px';
      displayAdUnitRight.style.position = 'absolute';
      _displayAdRightCont.appendChild(displayAdUnitRight);
    };

    var _prebidConfig = function() {
      _displayAdIntervalLeft = widgetConfig.displayAdTimeout,
        _displayAdIntervalRight = widgetConfig.displayAdTimeout;
      trace(`_displayAdIntervalRight ${_displayAdIntervalLeft}`, `info`);
      trace(`_displayAdIntervalLeft ${_displayAdIntervalLeft}`, `info`);

      prebidAdUnits = [{
        code: widgetConfig.displayAdIdLeft,
        mediaTypes: {
          banner: {
            sizes: [
              [300, 250]
            ]
          },
          native: {
            image: {
              sizes: [
                [300, 250]
              ]
            }
          },
        },
        bids: widgetConfig.preBids[0]
      }, {
        code: widgetConfig.displayAdIdRight,
        mediaTypes: {
          banner: {
            sizes: [
              [300, 250]
            ]
          },
          native: {
            image: {
              sizes: [
                [300, 250]
              ]
            }
          },
        },
        bids: widgetConfig.preBids[0]
      }];


      if (widgetConfig.useAdFilter) {
        trace(`using ad filter`, `info`)
        pbjs.que.push(function() {

          var confiantWrap = function confiantWrap(a, b, c, d, e) {
            function f(a) {
              return (m(a) || "")[s]("/", "_")[s]("+", "-")
            }

            function g(b, c, d) {
              var e = w + n(b) + "&d=" + c,
                f = "err__" + 1 * new Date;
              k[f] = d;
              var g = "<" + q + " on" + t + '="void(' + f + '())" ' + r + '="' + e + '" type="text/java' + q + '" ></' + q + ">";
              a[v](g)
            }

            function h() {
              var c = f(d + "/" + x.k.hb_bidder[0] + ":" + x.k.hb_size[0]),
                h = {
                  wh: c,
                  wd: l.parse(l[u](x)),
                  wr: 0
                };
              g(c, f(l[u](h)), function() {
                a[v](b.ad)
              });
              var i = {
                  prebid: {
                    adId: b.adId,
                    cpm: b.cpm
                  }
                },
                j = {
                  d: h,
                  t: b.ad,
                  cb: e,
                  id: i
                };
              k[d] = {}, k[d][c] = j
            }
            var i = b.bidder,
              j = b.size,
              k = a.parentWindow || a.defaultView,
              l = k.JSON,
              m = k.btoa,
              n = k.encodeURIComponent;
            if (!l || !m) return !1;
            var o = "t",
              p = "i",
              q = "script",
              r = "src",
              s = "replace",
              t = "error",
              u = "stringify",
              v = "wr" + p + o + "e",
              w = "https://" + c + "/?wrapper=" + n(d) + "&tpid=",
              x = {
                k: {
                  hb_bidder: [i],
                  hb_size: [j]
                }
              };
            return h(), a.close(), !0
          };

          // keep a reference to original renderAd function
          var w = window;
          w._clrm = w._clrm || {};
          w._clrm.renderAd = w._clrm.renderAd || pbjs.renderAd;
          var config = w._clrm.prebid || {
            /* Enables sandboxing on a device group
                 All:1 , Desktop:2, Mobile: 3, iOS: 4, Android: 5, Off: 0
             */
            sandbox: 0
          };

          var isGoogleFrame = function(c) {
            return c.tagName === 'IFRAME' && c.id && c.id.indexOf('google_ads_iframe_') > -1;
          }

          var shouldSandbox = function() {
            var uaToRegexMap = {
                "mobile": /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile/i,
                "ios": /(.+)(iPhone|iPad|iPod)(.+)OS[\s|\_](\d)\_?(\d)?[\_]?(\d)?.+/i,
                "android": /Android/i
              },
              sbStr = "" + config.sandbox;
            if (sbStr === "1") {
              // all environments
              return true;
            } else if (sbStr === "2") {
              // desktop
              return !navigator.userAgent.match(uaToRegexMap["mobile"]);
            } else if (sbStr === "3") {
              // mobile
              return navigator.userAgent.match(uaToRegexMap["mobile"]);
            } else if (sbStr === "4") {
              // ios only
              return navigator.userAgent.match(uaToRegexMap["ios"]);
            } else if (sbStr === "5") {
              // android
              return navigator.userAgent.match(uaToRegexMap["android"]);
            } else {
              return false;
            }
          }

          Node.prototype.appendChild = (function(original) {
            return function(child) {
              if (isGoogleFrame(child) && shouldSandbox() && !child.getAttribute('sandbox')) {
                child.setAttribute('sandbox', 'allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation');
                child.setAttribute('data-forced-sandbox', true);
              }
              return original.call(this, child);
            };
          }(Node.prototype.appendChild));


          // override renderAd
          pbjs.renderAd = function(doc, id) {
            if (doc && id) {
              try {

                // get pbjs bids
                var bids = [],
                  bidResponses = pbjs.getBidResponses(),
                  highestBids = pbjs.getHighestCpmBids();
                for (var slot in bidResponses) {
                  bids = bids.concat(bidResponses[slot].bids);
                }
                bids = bids.concat(highestBids);

                // lookup ad by ad Id (avoid ES6 array functions)
                var bid, i;
                for (i = 0; i < bids.length; i++) {
                  if (bids[i].adId === id) {
                    bid = bids[i];
                    break;
                  }
                }

                // Optional: list of bidders that don't need wrapping, array of strings, e.g.: ["bidder1", "bidder2"]
                var confiantExcludeBidders = [];

                // check bidder exclusion (avoid ES6 array functions)
                var excludeBidder = false;
                for (i = 0; i < confiantExcludeBidders.length; i++) {
                  if (bid.bidder === confiantExcludeBidders[i]) {
                    excludeBidder = true;
                    break;
                  }
                }

                if (bid && bid.ad && !excludeBidder) {
                  // Neutralize document
                  var docwrite = doc.write;
                  var docclose = doc.close;
                  doc.write = doc.close = function() {};
                  // call renderAd with our neutralized doc.write
                  window._clrm.renderAd(doc, id);
                  // Restore document
                  delete doc.write;
                  delete doc.close;

                  var callback = function(blockingType, blockingId, isBlocked, wrapperId, tagId, impressionData) {
                    trace(`Nixed`, `info`);
                    _displayAdHasRendered = false;
                  };

                  var cdnHost = 'clarium.global.ssl.fastly.net';
                  var confiantId = '9tgoNyGTAZjiv_HkXoBbJClUKFo';
                  // do the actual ad serving and fall back on document.write if failure
                  if (!confiantWrap(doc, bid, cdnHost, confiantId, callback)) {
                    doc.write(bid.ad);
                    doc.close();
                  }

                  return;
                }
              } catch (e) {
                console.log(e);
              }
            }

            // if bid.ad is not defined or if any error occurs, call renderAd to serve the creative
            window._clrm.renderAd(doc, id);
          };

        });
      };


      window.pbjs = window.pbjs || {};
      window.pbjs.que = window.pbjs.que || [];

      const customGranularity = {
        'buckets': [{
          'min': 0.03,
          'max': 5.00,
          'increment': 0.01
        }, {
          'min': 5.00,
          'max': 10.00,
          'increment': 0.05
        }, {
          'min': 10.00,
          'max': 20.00,
          'increment': 0.10
        }]
      };

      window.pbjs.setConfig({
        priceGranularity: customGranularity,
        userSync: {
          filterSettings: {
            iframe: {
              bidders: '*', // '*' represents all bidders
              filter: 'include'
            }
          }
        }
      })

      window.pbjs.bidderSettings = {
        sonobi: {
          bidCpmAdjustment: function(bidCpm) {
            // adjust the bid in real time before the auction takes place
            console.log(1 * widgetConfig.bidCpms['sonobi']);
            return bidCpm * widgetConfig.bidCpms['sonobi']; //0.7;
          }
        },
        districtmDMX: {
          bidCpmAdjustment: function(bidCpm) {
            // adjust the bid in real time before the auction takes place
            console.log(1 * widgetConfig.bidCpms['districtmDMX']);
            return bidCpm * widgetConfig.bidCpms['districtmDMX']; //0.85;
          }
        }
      };
      // end prebid cfg
    }

    var _callPrebid = function() {
      cLog('calling prebid');
      _prebidInitialized = true;
      if (widgetConfig.useSession) {
        if (widgetConfig.maxDisplayAdRequestTimeInSec == 0 || isSessionExpired(_displayAdTimeSessionKey, widgetConfig.maxDisplayAdRequestTimeInSec * 1000))
          resetDisplayAdRequestCount();
      }

      window.pbjs.que.push(function() {
        window.pbjs.addAdUnits(prebidAdUnits);
      });

      window.pbjs.onEvent('bidWon', function(e) {
        if (e.adUnitCode === widgetConfig.displayAdIdLeft) {
          switch (e.bidder) {
            case 'sonobi':
              _displayAdIntervalLeft = 40 * 1000;
              trace(`sonobi intervalLeft = ${_displayAdIntervalLeft}`, `info`);
              break;
            case 'sovrn':
              // code block
              break;
            case 'districtmDMX':
              // code block
              break;
            case '33across':
              // code block
          }
        } else if (e.adUnitCode === widgetConfig.displayAdIdRight) {
          switch (e.bidder) {
            case 'sonobi':
              _displayAdIntervalRight = 40 * 1000;
              trace(`sonobi intervalRight = ${_displayAdIntervalRight}`, `info`);
              break;
            case 'sovrn':
              // code block
              break;
            case 'districtmDMX':
              // code block
              break;
            case '33across':
              // code block
          }
        }

        let wSSP = '';
        if (e.bidder && e.bidder.length > 2) {
          wSSP = e.bidder.substring(0, 3);
        }
        trace(`${wSSP} - ${e.adserverTargeting.hb_pb}`, `price`);
        eventLog(`Winning Bidder = ${e.bidder} // CPM = ${e.adserverTargeting.hb_pb} // bid = ${e.cpm}`, `color:red;`);
      });

      window.pbjs.onEvent('auctionInit', function(e) {
        // console.log(`auctionInit`, e);
      });
      window.pbjs.onEvent('bidRequested', function(e) {
        // console.log(`bidRequested`, e);
      });
      window.pbjs.onEvent('bidResponse', function(e) {
        // console.log(`bidResponse`, e);
      });
      if (!_requestAdsAfterLoad())
        refreshBids();
    }

    function refreshSlot(slot) {
      if (_isValidForDisplayAdRequest() && !_adSlotsCleared) {
        if (!_adSlotsCleared && slot != null) {
          window.pbjs.que.push(function() {
            window.pbjs.requestBids({
              timeout: PREBID_TIMEOUT,
              adUnitCodes: [slot.getSlotElementId()],
              bidsBackHandler: function() {
                window.pbjs.setTargetingForGPTAsync([slot.getSlotElementId()]);
                window.googletag.pubads().refresh([slot]);
                incrementDisplayAdRequestCount();
              }
            });
          });
        } else if (slot == null) {
          pbjs.que.push(function() {
            pbjs.requestBids({
              timeout: PREBID_TIMEOUT,
              bidsBackHandler: function() {
                pbjs.setTargetingForGPTAsync();
                googletag.pubads().refresh();
                incrementDisplayAdRequestCount(2);
              }
            });
          });
          _adSlotsCleared = false;
        }
      }
      _resetAdInterval(slot);
    }

    function refreshBids() {
      if (_isValidForDisplayAdRequest()) {
        pbjs.que.push(function() {
          pbjs.requestBids({
            timeout: PREBID_TIMEOUT,
            bidsBackHandler: function() {
              pbjs.setTargetingForGPTAsync();
              googletag.pubads().refresh();
              incrementDisplayAdRequestCount(2);
            }
          });
        });
        _adSlotsCleared = false;
      }
    }

    var _setupDisplay = function() {
      //$ Create div for window.googletag to push to
      _createDisplayAdDivs();
      _prebidConfig();
      if (!widgetConfig.useSession || widgetConfig.maxDisplayAdRequestTimeInSec == 0)
        _displayAdRequestCount = 0;

      // Reference vars for googletag
      window.googletag = window.googletag || {};
      window.googletag.cmd = window.googletag.cmd || [];
      window.googletag.cmd.push(function() {
        window.googletag.pubads().disableInitialLoad();
      });

      var _isDfpOrder = function(id) {
        let validIds = [2162947417, 2250275929, 2334149426, 2385640231, 2239771125];
        return (id && validIds.includes(id));
      };

      // Call google tag function from window
      window.googletag.cmd.push(function() {
        _smbGptLeftAdSlot = window.googletag.defineSlot(widgetConfig.displayAdSlotLeft, [_smbDisplayAdWidth, _smbDisplayAdHeight], widgetConfig.displayAdIdLeft).addService(window.googletag.pubads());
        _smbGptRightAdSlot = window.googletag.defineSlot(widgetConfig.displayAdSlotRight, [_smbDisplayAdWidth, _smbDisplayAdHeight], widgetConfig.displayAdIdRight).addService(window.googletag.pubads());

        window.googletag.pubads().enableSingleRequest();
        window.googletag.enableServices();

        if (!_requestAdsAfterLoad())
          _callPrebid();

        // // Listen for slot to render
        window.googletag.pubads().addEventListener('slotRenderEnded', function(event) {
          let targetSlot = event.slot.getAdUnitPath();
          if (targetSlot === widgetConfig.displayAdSlotLeft || targetSlot === widgetConfig.displayAdSlotRight) {
            cLog(`${targetSlot} has rendered`);
            _displayAdHasRendered = (event.slotContentChanged && !event.isEmpty);
            if (event.campaignId != null && !_isDfpOrder(event.campaignId)) {
              eventLog(`Prebid bidder won`, `color:white`);
              trace('pb', 'price')
            } else if (event.campaignId == '2162947417') {
              eventLog(`AdEx won`, `color:red`);
              trace('ae', 'price')
            } else if (event.campaignId == '2385640231') {
              eventLog(`AdEx2 won`, `color:red`);
              trace('ae2', 'price')
            } else if (event.campaignId == '2250275929') {
              eventLog(`bidWin - smb adX house`, `color:red`);
              trace('smb ae hs', 'price')
              if (widgetConfig.videoRequestType == 'googima') {
                _displayAdHasRendered = false;
                eventLog(`ignoring adX house - showing slides`, `color:purple`);
              }
            } else if (event.campaignId == '2334149426') {
              eventLog(`bidWin - AdX Price Priority`, `color:red`);
              trace('ae pp', 'price')
            } else if (event.campaignId == '2239771125') {
              eventLog(`33across won`, `color:red`);
              trace('33', 'price')
              //if (widgetConfig.partnerName == 'genius')
              //  _displayAdHasRendered = false;
            } else {
              _displayAdHasRendered = false;
              eventLog(`No Winner`, `color:red`);
              trace('nw - ' + event.campaignId, 'price')
            };

            if (event.isEmpty === false && _displayAdHasRendered) {
              cLog(`found display ad. slot = ${targetSlot}`);
              if (targetSlot == widgetConfig.displayAdSlotLeft)
                _displayAdLeftTimeout = setTimeout(function() {
                  refreshSlot(_smbGptLeftAdSlot);
                }, _displayAdIntervalLeft);
              else {
                _displayAdRightTimeout = setTimeout(function() {
                  refreshSlot(_smbGptRightAdSlot);
                }, _displayAdIntervalRight);
              }
            } else {
              cLog(`NOT found display ad. slot = ${targetSlot}`);
              if (targetSlot == widgetConfig.displayAdSlotLeft)
                _displayAdLeftTimeout = setTimeout(function() {
                  refreshSlot(_smbGptLeftAdSlot);
                }, _displayAdRefreshInterval);
              else
                _displayAdRightTimeout = setTimeout(function() {
                  refreshSlot(_smbGptRightAdSlot);
                }, _displayAdRefreshInterval);
            }
          } else
            cLog(`Invalid slot render on ${targetSlot}`);
        });

        // Listen for Impression
        window.googletag.pubads().addEventListener('impressionViewable', function(event) {
          let targetSlot = event.slot.getAdUnitPath();
          if (targetSlot == widgetConfig.displayAdSlotLeft || targetSlot == widgetConfig.displayAdSlotRight) {
            eventLog(`${targetSlot}: Impression is viewable`, `color:green`);
          }
        });

      });

      // Push ad to div
      window.googletag.cmd.push(function() {
        window.googletag.display(widgetConfig.displayAdIdLeft);
      });
      window.googletag.cmd.push(function() {
        window.googletag.display(widgetConfig.displayAdIdRight);

      });
    }

    //  Use prebid to get new ads  NOT USED?
    // var _refreshAdSlots = function () {
    //     if (window.googletag && window.googletag.apiReady) {
    //         refreshSlot(null);
    //         cLog("Refreshing bids");
    //     } else
    //         cLog('Google slot not ready for refresh');
    // };


    var _resetAdInterval = function(slot) {
      let adSlot = null;

      if (slot != null) {
        adSlot = slot.getAdUnitPath()
      }

      if (adSlot == null) {
        _displayAdIntervalRight = widgetConfig.displayAdTimeout;
        trace(`Left interval reset to ${_displayAdIntervalLeft} from null`, `info`);
        _displayAdIntervalLeft = widgetConfig.displayAdTimeout;
        trace(`Right interval reset to ${_displayAdIntervalRight} from null`, `info`);
      } else if (adSlot === widgetConfig.displayAdSlotLeft) {
        _displayAdIntervalLeft = widgetConfig.displayAdTimeout;
        trace(`Left interval reset to ${_displayAdIntervalLeft}`, `info`);
      } else if (adSlot === widgetConfig.displayAdSlotRight) {
        _displayAdIntervalRight = widgetConfig.displayAdTimeout;
        trace(`Right interval reset to ${_displayAdIntervalRight}`, `info`);
      }
    }

    var _clearAdSlots = function() {
      cLog(`clearing ad slots`);
      _adSlotsCleared = true;
      if (_displayAdLeftTimeout)
        clearTimer(_displayAdLeftTimeout);
      if (_displayAdRightTimeout)
        clearTimer(_displayAdRightTimeout);
      window.googletag.pubads().clear();

      _resetAdInterval(null)
    };

    // *
    // AD UNIT FUNCTIONS
    // *
    var _playerElementIdPrefix = 'smb-vd-player-';
    //var _bind = function(el, evt, fcn) {
    //  el[window.addEventListener ? 'addEventListener' : 'attachEvent'](window.addEventListener ? evt : 'on' + evt, fcn, false);
    //};

    var _createVideoUnit = function() {
      var adUnitCont = el.create('div', {
        className: widgetAdUnitContClass
      });
      adUnitCont.style.paddingTop = '100%';
      adUnitCont.style.display = 'block';
      _setupLKQDVideoPlayer();
    };

    // Deconstruct video ad tag for MOAT ids
    var _tagDeconstruct = function() {
      if (widgetConfig.videoTag.indexOf('pubads') > -1)
        return _tagInfo = {
          id: widgetConfig.videoTag.split('/')[6].split('&')[0],
          AdServer: 'DFP'
        };
      else if (widgetConfig.videoTag.indexOf("springserve") > -1)
        return _tagInfo = {
          id: widgetConfig.videoTag.split('/')[4].split('?')[0],
          AdServer: 'SpringServe'
        };
      else if (widgetConfig.videoTag.indexOf("lkqd") > -1)
        return _tagInfo = {
          id: widgetConfig.videoTag.split('=')[2].split('&')[0],
          AdServer: 'LKQD'
        };
      else
        return _tagInfo = {
          id: "",
          AdServer: ""
        };
    };

    var _setupLKQDVideoPlayer = function() {
      if (_isMobileDevice()) {
        widgetConfig.isMuted = true;
      }
      _tagDeconstruct();

      _moatIds = {
        "level1": widgetConfig.partnerName,
        "level2": 'widget/gpt/970x250',
        "level3": _tagInfo.AdServer,
        "level4": _tagInfo.id,
        "slicer1": widgetConfig.videoRequestType
      };

      var lkqdSettings = {
        pid: 437, //21=lkqd sample
        sid: widgetConfig.videoId, // 71907=lkqd sample,
        //              pid: 21,
        //        			sid: 71907,
        playerContainerId: 'smbPlayer',
        playerId: '',
        playerWidth: 370,
        playerHeight: 250,
        execution: 'inbanner',
        placement: '',
        passbackFirst: false,
        playInitiation: 'auto',
        volume: 0,
        pageUrl: window.location.href,
        trackImp: '',
        trackClick: '',
        custom1: '',
        custom2: '',
        custom3: '',
        pubMacros: '',
        dfp: false,
        gdpr: '',
        gdprcs: '',
        lkqdId: new Date().getTime().toString() + Math.round(Math.random() * 1000000000).toString(),
        supplyContentVideo: {
          url: '',
          clickurl: '',
          play: 'pre'
        }
      };

      trace(`LKQD Player init - (${widgetConfig.partnerName}) - sid: ${lkqdSettings.sid}`, `info`);
      var creativeData = '';
      if (!document.getElementById(lkqdSettings.playerContainerId)) {
        try {
          if (document.readyState && document.readyState != 'complete' && document.readyState != 'interactive') {
            document.write('<div id=' + lkqdSettings.playerContainerId + '></div>');
          }
        } catch (e) {}
      }
      var environmentVars = {
        slot: document.getElementById(lkqdSettings.playerContainerId),
        videoSlot: document.getElementById(lkqdSettings.playerId),
        videoSlotCanAutoPlay: true,
        lkqdSettings: lkqdSettings
      };

      function onVPAIDLoad() {
        // vpaid EVENTS
        lkqdVPAID.subscribe(function() {
          cLog('AdLoadFailure');
        }, 'AdLoadFailure');
        lkqdVPAID.subscribe(function() {
          cLog('AdNotViewable');
          _isVideoContainerViewable = false;
        }, 'AdNotViewable');
        lkqdVPAID.subscribe(function() {
          cLog('Viewability');
        }, 'Viewability');
        lkqdVPAID.subscribe(function() {
          cLog('AdUnmeasurable');
        }, 'AdUnmeasurable');
        //          		lkqdVPAID.subscribe(function(){ cLog('AdOpportunity'); }, 'AdOpportunity');
        lkqdVPAID.subscribe(function() {
          cLog('AdNonOpportunity');
        }, 'AdNonOpportunity');
        lkqdVPAID.subscribe(function() {
          cLog('AdUnavailable');
        }, 'AdUnavailable');
        lkqdVPAID.subscribe(function() {
          cLog('AdAvailable');
        }, 'AdAvailable');
        lkqdVPAID.subscribe(function() {
          cLog('AdUnavailableTimeout');
        }, 'AdUnavailableTimeout');
        lkqdVPAID.subscribe(function() {
          cLog('AdUnavailableNonSuccess');
        }, 'AdUnavailableNonSuccess');
        lkqdVPAID.subscribe(function() {
          cLog('AdUnavailableAborted');
        }, 'AdUnavailableAborted');
        lkqdVPAID.subscribe(function() {
          cLog('AdAvailableHeaderBidding');
        }, 'AdAvailableHeaderBidding');
        lkqdVPAID.subscribe(function() {
          cLog('AdUnavailableHeaderBidding');
        }, 'AdUnavailableHeaderBidding');
        lkqdVPAID.subscribe(function() {
          cLog('ContentVideoStart');
        }, 'ContentVideoStart');
        lkqdVPAID.subscribe(function() {
          cLog('ContentVideoComplete');
        }, 'ContentVideoComplete');

        lkqdVPAID.subscribe(function() {
          cLog('AdViewable');
          _isVideoContainerViewable = true;
          if ((_videoState == 'AdPaused') && (_currentFocus == 'videoAd')) {
            trace('resuming video in view', 'info');
            lkqdVPAID.resumeAd();
          }
        }, 'AdViewable');

        lkqdVPAID.subscribe(function() {
          cLog('AdOpportunity');
          if (_currentFocus == 'videoAd') // catchall in case AdVideoComplete was not raised and able to hide the video container
            _showSlideContainer();
        }, 'AdOpportunity');

        lkqdVPAID.subscribe(function() {
          cLog('AdLoaded');
          _videoState = 'AdLoaded';
          if (_currentFocus == 'videoAd') // catchall in case AdVideoComplete was not raised and able to hide the video container
            _showSlideContainer();
          if (!widgetConfig.videoAdEnabled) {
            trace('Video disabled!', 'info');
            lkqdVPAID.stopAd();
          } else {
            incrementVideoAdRequestCount();
          }
          lkqdVPAID.startAd();
        }, 'AdLoaded');

        lkqdVPAID.subscribe(function() {
          cLog('AdStarted');
          _videoState = 'AdStarted';
          eventLog('AdStarted event -- viewable=' + _isPlayerViewable() + '  //  playerState =' + _videoState, `color:blue`);
          _adIsLoaded = true;
          if (widgetConfig.isMuted == true)
            lkqdVPAID.setAdVolume(0);
          // Starts video without being in view
          if (!widgetConfig.startWhenViewable) {
            lkqdVPAID.pauseAd();
            _showVideoUnit();
          } else {
            // Starts video only when viewable
            if (!_isPlayerViewable()) {
              eventLog(` AdStarted - pausing player out of view`, `color:orange`);
              lkqdVPAID.pauseAd();
              _showVideoUnit();
            } else {
              cLog('AdStarted READY TO PLAY');
              _showVideoUnit();
            }
          }
        }, 'AdStarted');

        lkqdVPAID.subscribe(function() {
          cLog('AdImpression');
        }, 'AdImpression');

        lkqdVPAID.subscribe(function() {
          cLog('AdVideoStart.  State : ' + _videoState);
        }, 'AdVideoStart');

        lkqdVPAID.subscribe(function() {
          cLog('AdVideoFirstQuartile');
          raiseMoatEvent('AdVideoFirstQuartile', lkqdVPAID.getAdVolume());
        }, 'AdVideoFirstQuartile');
        lkqdVPAID.subscribe(function() {
          cLog('AdVideoMidpoint');
          raiseMoatEvent('AdVideoMidpoint', lkqdVPAID.getAdVolume());
        }, 'AdVideoMidpoint');
        lkqdVPAID.subscribe(function() {
          cLog('AdVideoThirdQuartile');
          raiseMoatEvent('AdVideoThirdQuartile', lkqdVPAID.getAdVolume());
        }, 'AdVideoThirdQuartile');

        lkqdVPAID.subscribe(function() {
          cLog('AdVideoComplete');
          _videoState = 'AdVideoComplete';
          raiseMoatEvent('AdVideoComplete', lkqdVPAID.getAdVolume());
          _showSlideContainer();
        }, 'AdVideoComplete');

        lkqdVPAID.subscribe(function() {
          cLog('AdPlaying');
          _videoState = 'AdPlaying';
          if (!_moatApi) {
            _moatApi = initMoatTracking(document.getElementById('smbPlayer'), _moatIds, lkqdVPAID.getAdDuration(), 'saambaajsvidint907431712010', widgetConfig.videoTag); // was e.Tag (FIND THIS)
            raiseMoatEvent('AdVideoStart', lkqdVPAID.getAdVolume());
          }
        }, 'AdPlaying');
        lkqdVPAID.subscribe(function() {
          cLog('AdStopped');
          _videoState = 'AdStopped';
        }, 'AdStopped');
        lkqdVPAID.subscribe(function() {
          cLog('AdPaused');
          _videoState = 'AdPaused';
          raiseMoatEvent('AdPaused', lkqdVPAID.getAdVolume());
        }, 'AdPaused');
        lkqdVPAID.subscribe(function() {
          cLog('AdError');
          _videoState = 'AdError';
        }, 'AdError');

      }

      vpaidFrame = document.createElement('iframe');
      vpaidFrame.id = lkqdSettings.lkqdId;
      vpaidFrame.name = lkqdSettings.lkqdId;
      vpaidFrame.style.display = 'none';
      var vpaidFrameLoaded = function() {
        vpaidFrame.contentWindow.addEventListener('lkqdFormatsLoad', function() {
          lkqdVPAID = vpaidFrame.contentWindow.getVPAIDAd();
          onVPAIDLoad();
          lkqdVPAID.handshakeVersion('2.0');
          setTimeout(function() {
            lkqdVPAID.initAd(lkqdSettings.playerWidth, lkqdSettings.playerHeight, 'normal', 600, creativeData, environmentVars);
          }, 200);

        });
        var vpaidLoader = vpaidFrame.contentWindow.document.createElement('script');
        vpaidLoader.setAttribute('async', 'async');
        vpaidLoader.src = 'https://ad.lkqd.net/vpaid/formats.js';
        vpaidFrame.contentWindow.document.body.appendChild(vpaidLoader);
      };
      var vpaidFrameLoadedError = function() {
        cLog("init err");
      };
      vpaidFrame.onload = vpaidFrameLoaded;
      vpaidFrame.onerror = vpaidFrameLoadedError;
      _videoCont.appendChild(vpaidFrame);

    }; // end _setupLKQDVideoPlayer

    var _showVideoUnit = function() {
      _stopSlide();
      if (widgetConfig.videoAdEnabled) {
        cLog('showing video unit - ' + _videoState);
        _currentFocus = 'videoAd';
        // hide items
        _slideShowCont.style.display = 'none';
        // show ad unit
        _videoCont.style.display = 'block';
        _videoCont.style.zIndex = _showZindex;

        _clearAdSlots();
        if (widgetConfig.startWhenViewable && !_isPlayerViewable())
          return; // leave in this paused state
        if (_videoState == 'AdPaused') {
          cLog('resuming (playing) ready video in showAdUnit');
          lkqdVPAID.resumeAd();
        }
      } else { // skip video if tag is blank
        cLog('no ad tag, skipping video');
        _showSlideContainer();
      }
    };

    var _isPlayerViewable = function() {
      return _isVideoContainerViewable;
    }

    var _isElementVisible = function(el) {
      if (widgetConfig.visibility == '50') {
        var rect = el.getBoundingClientRect(),
          vWidth = window.innerWidth || doc.documentElement.clientWidth,
          vHeight = window.innerHeight || doc.documentElement.clientHeight,
          efp = function(x, y) {
            return document.elementFromPoint(x, y)
          };

        // Return false if it's not in the viewport
        if (rect.right < 0 || rect.bottom < 0 || rect.left > vWidth || rect.top > vHeight)
          return false;

        // Return true if any of its four corners are visible
        return (
          el.contains(efp(rect.left, rect.top)) ||
          el.contains(efp(rect.right, rect.top)) ||
          el.contains(efp(rect.right, rect.bottom)) ||
          el.contains(efp(rect.left, rect.bottom)));
      } else {
        var elemTop = el.getBoundingClientRect().top;
        var elemBottom = el.getBoundingClientRect().bottom;

        var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);
        return isVisible;
      }
    }

    var _showSlideContainer = function() {
      cLog('Showing Slides');
      _currentFocus = 'slides';
      _videoCont.style.zIndex = _hideZindex;
      _slideShowCont.style.display = 'block';

      if (_firstLoad) {
        _firstLoad = false;
        _onMarketChange(_getSelectedMarketInfo());
      } else {
        _nextSlide();
      }
    };

    var _getSelectedMarketInfo = function(e) {
      var markets = e && e.target;

      if (e)
        markets = markets.options;
      else
        markets = _marketSelect.options;

      for (var i = 0; i < markets.length; i++) {
        var market = markets[i];

        if (market.selected) {
          var marketInfo = {
            marketId: parseInt(market.value),
            marketName: market.innerHTML
          };
          return marketInfo;
        }
      }
    };

    // support for pause/play the player based on browser tab in view.
    (function() {
      var hidden = "hidden";

      // Standards:
      if (hidden in document)
        document.addEventListener("visibilitychange", onchange);
      else if ((hidden = "mozHidden") in document)
        document.addEventListener("mozvisibilitychange", onchange);
      else if ((hidden = "webkitHidden") in document)
        document.addEventListener("webkitvisibilitychange", onchange);
      else if ((hidden = "msHidden") in document)
        document.addEventListener("msvisibilitychange", onchange); // IE 9 and lower:
      else if ("onfocusin" in document)
        document.onfocusin = document.onfocusout = onchange; // All others:
      else if (!_isAdexBlocked())
        window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;

      function onchange(evt) {
        var v = "visible",
          h = "hidden",
          evtMap = {
            focus: v,
            focusin: v,
            pageshow: v,
            blur: h,
            focusout: h,
            pagehide: h
          };
        evt = evt || window.event;
        if (evt.type in evtMap) {; //cLog('focusX=' + evtMap[evt.type]);
        } else if ((widgetConfig.videoAdEnabled) && (!_displayAdMode)) {
          if (this[hidden]) {
            //cLog("Pausing play");
            if (lkqdVPAID)
              lkqdVPAID.pauseAd();
          } else if (_isPlayerViewable()) {
            //cLog("resuming play");
            _initMoatOnAdTime = true;
            lkqdVPAID.resumeAd();
          }
        }
      }

      // set the initial state (but only if browser supports the Page Visibility API)
      if (document[hidden] !== undefined)
        onchange({
          type: document[hidden] ? "blur" : "focus"
        });
    })();

    var _trackHit = function(marketId, widget) {
      //api.saambaa.com/track/hit?adId=5&marketID=1&widget="localstack"
      if (!marketId)
        marketId = _currentMarketId || _config.marketId;
      if (!widget)
        widget = _smbJwTag;
      widget = _trimString(encodeURIComponent(widget), 100);
      var pid = _config.partnerId == 1 ? 5 : _config.partnerId;
      cLog('partnerId=' + pid + ', trimmed = ' + widget);
      _execJsonReq('POST', apiBaseUrl + '/track/hit?adId=' + pid + '&marketID=' + marketId + '&widget=' + widget, function(data) {
        cLog('hit track = ' + JSON.stringify(data));
      });
    };

    var _trimString = function(str, len) {
      if (str.length > len)
        return str.substring(0, len);
      else
        return str;
    };

    // EVENTS
    var _displayAdRequestTimeout = function() {
      if (_requestDisplayAdTimeoutTimer)
        clearTimer(_requestDisplayAdTimeoutTimer);
      if (widgetConfig.useSession && widgetConfig.maxDisplayAdRequests > 0) { // if session timeout then reset it
        var isoSetTime = Date.now();
        sessionStorage.setItem(_displayAdTimeSessionKey, isoSetTime);
        resetDisplayAdRequestCount();
        widgetConfig.displayAdEnabled = true; // this event could only be fired if enabled by default so re-enable
        _requestDisplayAdTimeoutTimer = setTimeout(_displayAdRequestTimeout, widgetConfig.maxDisplayAdRequestTimeInSec * 1000);
        trace(`Re-set dispAd time to ${isoSetTime}`, 'warn')
      } else {
        trace(`Timeout - Disabling display ad requests`, 'warn')
        widgetConfig.displayAdEnabled = false;
      }
    };

    var _videoAdRequestTimeout = function() {
      if (_requestVideoTimeoutTimer)
        clearTimer(_requestVideoTimeoutTimer);
      if (widgetConfig.useSession && widgetConfig.maxVideoAdRequests > 0) { // if session timeout then reset it
        var isoSetTime = Date.now();
        sessionStorage.setItem(_videoAdTimeSessionKey, isoSetTime);
        sessionStorage.setItem(_videoAdRequestCountSessionKey, '0');
        _videoAdRequestCount = 0;
        widgetConfig.videoAdEnabled = true; // this event could only be fired if enabled by default so re-enable
        _requestVideoTimeoutTimer = setTimeout(_videoAdRequestTimeout, widgetConfig.maxVideoAdRequestTimeInSec * 1000);
        trace(`Re-set video time to ${isoSetTime}`, 'warn')
      } else {
        trace(`Timeout - Disabling video ad requests`, 'warn')
        widgetConfig.videoAdEnabled = false;
      }
    };

    var _onMarketChange = function(market) {
      _currentMarketId = market.marketId || market;
      _getPosts(_currentMarketId);
    };

    var _onSlideChange = function(count) {
      if (!_prebidInitialized) {
        _prebidInitialized = true;
        _callPrebid();
      }
      if (_currentFocus == 'videoAd')
        cLog('on slide change, WE SHOULD NOT SEE THIS');

      var showIdx = count < _slideMaxCount ? count : _slideMaxCount;
      cLog('Slide count = ' + _slideIndex % showIdx);
      if (_displayAdMode) // in this mode we do not create or use the video player
        _nextSlide();
      else {
        if (_isValidForVideoAdRequest() && !_showDisplayAd && !isAdReady()) {
          _nextSlide()
        } else if (isAdReady() && _isPlayerViewable()) {
          cLog('showing ad found between slides');
          _showVideoUnit();
        } else
          _nextSlide()
      }
    };

    var isAdReady = function() {
      return (_adIsLoaded && (_videoState == 'AdPlaying' || _videoState == 'AdPaused')); // _adIsLoaded is used to differentiate between and ad play and black video play.
    };

    var _requestAdsAfterLoad = function() {
      return (widgetConfig.optimizationLevel > 1);
    };

    var _requestAds = function() {
      if (_widgetLoaded) {
        if (!_prebidInitialized) {
          _prebidInitialized = true;
          _callPrebid();
        } else if (widgetConfig.displayAdEnabled)
          setTimeout(refreshBids, .5 * 1000);
      }
    };

    // PUBLIC
    return {

      // Bootstraps app
      init: function(widget, config) {
        if (_isAdexBlocked()) {
          console.warn('adex is being blocked - widget disabled')
        } else {
          _widget = widget;
          _config = config;
          _createAnalytics();
          _createWidget();
        }
      },

      showSlideUnit: _showSlideContainer

    }; // end public

  })(); // end module

  // *
  // Init widget after script dependencies have loaded
  // *
  var cbName = '__smbldr' + Math.round(Math.random() * 1000000), // jsonp callback
    cbConfigName = '__smbcfgldr' + Math.round(Math.random() * 1000000), // jsonp callback
    widgetCont = el.getByClassName(document, widgetClass)[0], // need the widget container to get data src
    widgetConfig = {
      partnerId: 0,
      channelId: 0,
      partnerName: widgetCont.getAttribute('data-smb-partner-id') ? widgetCont.getAttribute('data-smb-partner-id') : '',
      playerId: widgetCont.getAttribute('data-smb-vid-player'),
      defaultSize: widgetCont.getAttribute('data-smb-size') ? widgetCont.getAttribute('data-smb-size') : '',
      marketId: 0,
      isMuted: 0,
      volume: 1,
      videoRequestType: "vast",
      hoverUnMute: false,
      startWhenViewable: false,
      traceLevel: 0,
      visibility: 50,
      displayAdEnabled: false,
      videoAdEnabled: false,
      useSession: false,
      useAdFilter: false,
      displayAdTimeout: 10 * 1000,
      prebidTimeout: 700,
      maxDisplayAdRequests: 0,
      maxDisplayAdRequestTimeInSec: 0,
      maxVideoAdRequests: 0,
      maxVideoAdRequestTimeInSec: 0,
      maxPosts: 20,
      optimizationLevel: 0,
      analyticsSiteId: 0,
      videoFile: 'https://saambaa-static.azureedge.net/JyRhjVLe-30100108.mp4',
      videoTag: '',
      videoId: '',
      displayAdId: '',
      displayAdSlot: '',
      displayAdIdLeft: '',
      displayAdSlotLeft: '',
      displayAdIdRight: '',
      displayAdSlotRight: '',
      bidders: [],
      bidCpms: null,
      slideTimeInSec: 5,
      autoScrollEnabled: true,
    };
  // Load all style assets dynamically
  var stylesToLoad = [{
    id: fontStyleId,
    href: 'https://fonts.googleapis.com/css?family=Roboto:300,400,700'
  }, {
    id: widgetSelecStyleId,
    href: assetBaseUrl + '/assets/select.css'
  }, {
    id: widgetStyleId,
    href: assetBaseUrl + '/assets/smb-dispad.css'
  }];

  stylesLoader(stylesToLoad);

  var formatBids = function(bids) {
    var preBids = [];
    if (bids && bids.constructor === Array) {
      let sep = '';
      let bidStr = '';
      for (var i in bids) {
        bidStr = bidStr + sep + bids[i].Value;
        sep = ',';
      }
      preBids = JSON.parse(`[${bidStr}]`);
    }
    return preBids;
  };
  var formatCPMs = function(vals) {
    var CPMs = null;
    if (vals && vals.constructor === Array) {
      for (var i in vals) {
        if (typeof vals[i].Key !== "undefined" && vals[i].Key == "BidCpmAdjustment") {
          CPMs = JSON.parse(vals[i].Value);
          break;
        }
      }
    }
    return CPMs;
  };
  var getVideoIdFromTag = function(str) {
    let vidId = null;
    if (str != null) {
      let idx = str.indexOf('&sid=') + 5;
      if (idx > 0)
        vidId = str.substring(idx, idx + 6);
    }
    return vidId;
  };
  var getPartnerName = function(overrideName) {
    let partnerName = overrideName ? overrideName : location.host.split(".").slice(-2,-1).toString();
    if (!partnerName || (partnerName && partnerName.includes('google'))) {  // account for safeframe
      let domain = document.referrer.split('/')[2];
      partnerName = domain.split(".").slice(-2,-1);
    }
    return partnerName.toString();
  };

  // gets widget configuration settings
  window[cbName] = function(data) {
    widgetConfig.partnerId = 141; //parseInt(data.partner);
    widgetConfig.channelId = 34076; //parseInt(data.channel);
    widgetConfig.marketId = (widgetConfig.marketId == 0) ? parseInt(data.market) : widgetConfig.marketId;
  };
  window[cbConfigName] = function(data) {
    widgetConfig.partnerId = data.PartnerId;
    widgetConfig.channelId = data.ChannelId;
    widgetConfig.marketId = (data.MarketId != 0) ? data.MarketId : widgetConfig.marketId;
    widgetConfig.isMuted = data.IsMuted;
    widgetConfig.volume = parseInt(data.Volume);
    widgetConfig.videoRequestType = data.VideoRequestType;
    widgetConfig.hoverUnMute = data.HoverUnMute;
    widgetConfig.startWhenViewable = data.StartWhenViewable;
    widgetConfig.traceLevel = (window.location.href.indexOf('saambaa') > 0) ? 6 : data.TraceLevel;
    widgetConfig.visibility = data.Visibility;
    widgetConfig.videoTag = data.VideoTag;
    widgetConfig.displayAdEnabled = data.IsDisplayAdEnabled;
    widgetConfig.videoAdEnabled = (data.IsVideoEnabled && (widgetConfig.videoTag != null && widgetConfig.videoTag.length > 3));
    widgetConfig.maxDisplayAdRequests = data.MaxDisplayAdRequests;
    widgetConfig.maxDisplayAdRequestTimeInSec = data.MaxDisplayAdRequestTimeInSec;
    widgetConfig.maxVideoAdRequests = data.MaxVideoAdRequests;
    widgetConfig.maxVideoAdRequestTimeInSec = data.MaxVideoAdRequestTimeInSec;
    widgetConfig.maxPosts = data.MaxPosts;
    widgetConfig.optimizationLevel = data.OptimizationLevel;
    widgetConfig.displayAdIdLeft = data.DisplayAdId;
    widgetConfig.displayAdSlotLeft = data.DisplayAdSlot;
    widgetConfig.displayAdIdRight = data.DisplayAdIdAlt;
    widgetConfig.displayAdSlotRight = data.DisplayAdSlotAlt;
    widgetConfig.displayAdTimeout = data.DisplayAdTimeout * 1000;
    widgetConfig.useSession = data.UseSession;
    widgetConfig.useAdFilter = data.UseAdFilter;
    widgetConfig.prebidTimeout = data.PrebidTimeout;
    //widgetConfig.videoFile = data.VideoFile;  // the black video used after ad
    widgetConfig.analyticsSiteId = data.analyticsSiteId,
      widgetConfig.videoId = getVideoIdFromTag(data.VideoTag);
    widgetConfig.preBids = formatBids(data.PreBids);
    widgetConfig.bidCpms = formatCPMs(data.PreBidConfigs); //data.PreBidConfigs[0]);
    widgetConfig.slideTimeInSec = data.SlideTimeInSec;
    widgetConfig.autoScrollEnabled = data.SlideTimeInSec != 0;
  };

  widgetConfig.partnerName = getPartnerName(widgetConfig.partnerName);
  widgetConfig.playerId = 'smRnsmTB'; //'nhI3wNRn';
  //cLog('PartnerName = ' + widgetConfig.partnerName + ', PlayerId = ' + widgetConfig.playerId);

  var prebidjsFile = 'smb-prebid.js';

  // scriptsToLoadHead
  var scriptsToLoadHead = [{
    id: cbConfigName,
    src: apiBaseUrl + '/properties/' + widgetConfig.partnerName + '?callback=' + cbConfigName + '&wtype=' + widgetStyle + '&isMobile=' + _isMobileDevice()
  }, {
    id: googTagLibId,
    src: 'https://www.googletagservices.com/tag/js/gpt.js'
  }, {
    id: smbPrebid,
    src: '//saambaa.com/assets/js/' + prebidjsFile
  }, {
    id: cbName,
    src: '//saambaa.com/partner-status?callback=' + cbName + '&dataSrc=' + encodeURIComponent(widgetCont.getAttribute('data-src'))
  }, {
    id: 'googleAnalytics',
    src: 'https://www.google-analytics.com/analytics.js'
  }];

  scriptsLoader(scriptsToLoadHead, function() {
    VidWidget.init(widgetCont, widgetConfig);
  });
})();
